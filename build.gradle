buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'com.rbmh.rbss:rbss-platform-deploy-gradle-plugin:1.0.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id "net.saliman.cobertura" version "2.3.0"
    id 'idea'
    id "maven"
}

apply plugin: 'com.rbmh.rbss.rbss-platform-deploy-gradle-plugin'

ext {
    vertxVersion = '3.2.1'
    jsOutDir = "${projectDir}/build/generated"
}

group 'com.redbullmediahouse.platform'
version '0.2.0'

sourceSets {
    generated {
        java.srcDir "${projectDir}/src/generated/java"
    }
}

idea {
    project {
        languageLevel = '1.8'
    }
}
repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'http://artifactory1.ops.prod.rbmhops.net:8081/artifactory/libs-release/' }
}

sourceCompatibility = '1.8'
mainClassName = 'com.redbullmediahouse.platform.discovery.DiscoveryVerticle'

dependencies {
    compile "ch.qos.logback:logback-core:1.1.3"
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "org.slf4j:slf4j-api:1.7.12"
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-lang-js:$vertxVersion"
    compile "io.vertx:vertx-codegen:$vertxVersion"
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
    compile "io.vertx:vertx-tcp-eventbus-bridge:$vertxVersion"
    compile "io.vertx:vertx-dropwizard-metrics:$vertxVersion"
    compile 'com.redbullmediahouse.platform:rbmh-config-utils:0.2.2'
    compile 'io.vertx:vertx-zookeeper:3.2.0'
    compile 'com.amazonaws:aws-java-sdk-ec2:1.10.51'
    compile 'org.apache.curator:curator-client:2.10.0'
    compile 'org.apache.curator:curator-framework:2.10.0'
    compile 'org.apache.curator:curator-recipes:2.10.0'
    testCompile "io.vertx:vertx-unit:$vertxVersion"
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

/* used to create the fat jar files. */
jar {
    manifest {
        attributes(
                "Project-Version": project.version,
                "Project-Name": project.name
        )
    }
}

task generateProxies(type: JavaCompile, group: 'build', description: 'Generates the Vertx proxies') {
    doFirst {
        new File(jsOutDir).mkdirs()
    }
    source = sourceSets.main.java // input source set
    classpath = configurations.compile //+ configurations.vertx // add processor module to classpath
    // specify javac arguments
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor", // vertx processor here
            "-AoutputDirectory=${jsOutDir}"
    ]
    // specify output of generated code
    destinationDir = file("${projectDir}/src/generated/java")
}

compileJava {
    dependsOn(generateProxies)
    source += sourceSets.generated.java
}

generateNodePackage.dependsOn generateProxies

task copyNodePackage(type: Copy) {
    from "${jsOutDir}/resources/"
    into buildDir
}
copyNodePackage.dependsOn generateNodePackage

build.dependsOn copyNodePackage

generateMesosDeploy.dependsOn compileJava
publishMesosDeploy.dependsOn generateMesosDeploy
publishToMesosStaging.dependsOn publishMesosDeploy

task startTestDocker(type: Exec) {
    commandLine 'scripts/docker-start-test-containers.sh'
}
test.dependsOn startTestDocker

task stopTestDocker(type: Exec) {
    commandLine 'scripts/docker-stop-test-containers.sh'
}
test.finalizedBy stopTestDocker

test {
    useJUnit {
        includeCategories 'com.redbullmediahouse.platform.UnitTests'
    }
}

task itest(type: Test) {
    useJUnit {
        includeCategories 'com.redbullmediahouse.platform.IntegrationTests'
    }
}
itest.finalizedBy stopTestDocker
itest.dependsOn startTestDocker

generateDockerFile.dependsOn jar

task buildDocker(type: Exec) {
    commandLine 'scripts/docker-build.sh'
}
buildDocker.dependsOn generateDockerFile
buildDocker.dependsOn distTar

task pushDocker(type: Exec) {
    commandLine 'scripts/docker-push.sh'
}
pushDocker.dependsOn buildDocker

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
